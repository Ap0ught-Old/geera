#!/usr/bin/env ruby

require 'rubygems'
require 'tmpdir'
require 'geera'
require 'yaml'
require 'optparse'

config = File.join(ENV['HOME'], '.geera')
login  = YAML.load(File.read config) rescue nil
BUG_TEMPLATE = File.expand_path(File.join(
  File.dirname(__FILE__), '..', 'lib', 'template.txt'))

unless login
  File.open config, 'wb' do |f|

    options = {
      'username' => 'FIXME',
      'password' => 'FIXME',
      'url'      => 'FIXME',
      'qa'       => 'FIXME'
    }

    YAML.dump options, f
    f.chmod(0600)
  end
  abort "Created ~/.geera for you. Fill it out"
end


options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOF
  Usage: geera <command> <ticket|project> [options]

  Commands:
    show - Shows ticket details
      `geera show TK-421`
    create - Creates a new ticket in a project
      `geera create TK`
    start - Marks a ticket started for you.
      `geera start TK-421`
    fix - Marks a ticket as fixed and assigns to QA.
      `geera fix TK-421`
    reassign - Assigns a ticket to someone else
      `geera reassign TK-421 glucas`
    take - Assigns a ticket to yourself
      `geera take TK-421`
    list - Lists tickets in a filter
      `geera list 1138`
    comment - Simply comments on the ticket
      `geera comment --message 'This is a difficult bug.'`

    Options:
  EOF

  opts.on("-m", "--message MESSAGE", "Add a comment") do |v|
    options[:message] = v
  end
end.parse!

geera = Geera::Client.new(login['url'])
geera.login(login['username'], login['password'])

command = ARGV.shift
number  = ARGV.shift
ticket  = geera.ticket number

case command
when 'start'
  unless ticket.startable?
    abort "Ticket #{number} is not startable. Available actions:\n" \
      "  - #{ticket.available_actions.map { |x| x.name + "\n" }.join("  - ")}"
  end
  ticket.start!
when 'fix'
  ticket.start! if ticket.startable?
  ticket.fix! if ticket.fixable?
  ticket.assign_to login['qa'] if login['qa']
when 'mv', 'assign'
  ticket.assign_to ARGV.shift
when 'take'
  ticket.assign_to login['username']
when 'show'
  puts ticket.inspect
when 'filters'
  puts "# Your filters"
  geera.filters.each do |filter|
    puts "  * #{filter.name.inspect}"
  end
when 'list'
  number = (login['filters'] && login['filters'][number]) || number

  ## Ensure that +number+ is actually a number
  begin
    number = Integer(number)
  rescue ArgumentError
    number = geera.filters.find { |f| f.name == number }.id
  end

  tickets = geera.list number
  if(tickets.empty?)
    puts "No Tickets found"
  else
    tickets[0..10].each do |ticket|
      puts "#{ticket.key.ljust(8)} #{ticket.summary}"
    end
  end
when 'create'
  fname = File.join(Dir.tmpdir, 'bug.txt')
  File.open(fname, 'wb') do |f|
    f.write File.read(BUG_TEMPLATE)
  end

  system("#{ENV['EDITOR'] || 'vi'} #{fname}")
  contents = File.read(fname)
  sum, desc = contents.split('##### Description is below here #####')

  ticket = geera.create_ticket :project     => number,
                               :summary     => sum.sub(/^Summary:/, '').strip,
                               :description => desc && desc.strip

  puts "Created ticket: #{ticket.number}"
when 'comment'
  # Do nothing, let the -m flag pick it up
else
  raise "unknown command: #{command}"
end

ticket.comment options[:message] if options[:message]
